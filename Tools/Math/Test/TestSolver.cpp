/*
 * TestSolver.cpp
 *
 *  Created on: 30/06/2011
 *      Author: victor
 */

#include "TestSolver.h"
#include "../../../../Tools/Assertion.h"


/*-----------------------------------------------------------
Function: TestSolver::TestSolver()

Description:
Constructor. Just changes the name of the test suite.
In:
void

Out:
void
-----------------------------------------------------------------*/
TestSolver::TestSolver(){
	Test::create("");
}

/* -----------------------------------------------------------
Function: TestSolver::TestSolver(string name)

Description:
Initializes the test class giving it a name.

In:
void

Out:
void
-----------------------------------------------------------------*/

TestSolver::TestSolver(string name){
	Test::create(name);
}

/*-----------------------------------------------------------
Function: TestSolver:~TestSolver()

Description:
Destructor. Does nothing.
In:
void

Out:
void
-----------------------------------------------------------------*/
TestSolver::~TestSolver(){

}

/*-----------------------------------------------------------
Function:void TestSolver::init()

Description:
In this function global data has to be initialized (memory allocation, file reading... etc).

In:
void

Out:
void
-----------------------------------------------------------------*/

void TestSolver::init(){
	// Initialize vars we are going to use globally
}

/*
 Testea la resolución de un sistema Ax = b.
 El resultado es -15,8,2 .
 */
bool TestSolver::test_solver(){

	double A[]={1, 3,-2,
				3, 5, 6,
				2, 4, 3};



	double b[] ={5,7,8};

	double high[]={50,50,50};

	double low[]={-50,-50,-50};


	Solver solver(3,3);
	solver.setHigherRange(high,3);
	solver.setLowerRange(low,3);
	solver.setEigenVectors(A,9);
	solver.setDistances(b,3);
	solver.solve();

	double* x = solver.getWeights();
	double xsolv[]={-15,8,2};

	for(unsigned int i =0;i <3;i++)cout<<x[i]<<", ";
	cout<<endl;

	return Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(x,xsolv,3,1e-6);
}

/*
 Se testea el pipeline de la función 'solve' del solver usando todas las funciones por separado.
 Se comprueba que la resolución de unos pesos dados los vectores distancia generados con esos pesos, sean
 esos mismos pesos.
 */
bool TestSolver::test_minimath_solving_scenario(){

	double w_result[] = {0.5,0.5,0.5,0.5,0.5,0.5};

	double expected_eigenvectors[] = {-1.26331,-0.514253,-0.145942,-1.08271,-0.496248,-0.154184,-0.477177,-0.388004,-0.229792,-0.381672,-0.302635,-0.11929,0.0770273,-0.0564994,0.0960226,0.268589,-0.0191409,0.171224,0.497339,0.327323,0.536379,0.876506,0.490287,0.777353,0.611408,0.812933,0.924218,0.507307,0.785322,0.841767,0.0554518,0.552984,0.556401,-0.161703,0.194712,0.249388,-0.314509,0.279871,0.287815,-0.760505,-0.00570536,0.161745,-0.62191,0.0544086,0.264229,-1.02155,-0.0304996,0.386123,-0.547371,-0.0420755,0.285898,-0.637536,-0.226857,0.148414,-0.2147,-0.354141,-0.21864,-0.0213541,-0.0431793,0.133301,0.12689,0.276625,0.477722,0.684422,0.476815,0.508814,0.674847,0.374526,0.344657,0.714535,0.636555,0.698466,0.25729,0.492693,0.810357,0.273725,0.271534,0.539395,0.458384,0.451084,0.61784,0.319105,0.552189,0.86643,0.0462289,0.391107,0.821821,0.296144,0.375623,0.619039,0.295901,0.415461,0.6187,0.139982,0.403736,0.698661,0.0858634,0.420203,0.684418,0.405214,0.499311,0.544449,0.333413,0.452706,0.467792,0.571206,0.401295,0.330152,0.664553,0.136303,0.249042,0.620598,0.485546,0.507937,0.281366,0.755896,0.203286,0.649281,0.317084,-0.213291,1.00154,0.321044,0.58532,0.989969,0.270451,0.681098,0.881036,0.376548,0.393449,1.10332,-0.215493,-0.248768,0.789341,-0.45688,-0.576413,0.999074,-0.959339,-1.03859,1.63175,-0.759166,-1.07344,1.54412,-0.503829,-0.845057,1.72713,-0.0545393,-0.409365,1.37778,0.100639,-0.0963198,1.25438,0.612782,0.0494543,1.04334,0.628178,0.388779,1.50348,0.741576,0.43822,1.3888,0.476721,-0.0552961,0.816395,0.175852,-0.0146705,0.454002,-0.206169,-0.29579,0.484081,-0.481243,-0.656059,1.15125,-0.386712,-0.781009,1.11841,-0.576457,-1.01086,0.532915,-0.860307,-1.11573,0.210366,-0.680729,-0.769978,-0.403562,-0.910608,-0.857253,-0.878623,-0.920402,-0.756921,-0.790821,-0.9705,-0.83015,-0.157882,-0.810524,-0.802074,0.0281929,-0.683331,-0.571709,0.416028,-0.353024,-0.293966,0.629544,-0.190029,0.044592,0.780472,0.268112,0.442529,1.11511,0.231482,0.708267,1.23825,0.581814,1.06794,1.19785,0.181355,1.13714,-0.38427,1.2702,-2.32975,-8.1432,0.745673,-7.25215,-14.5513,-1.10587,-2.27041,-5.38479,-4.50218,3.66683,0.136238,0.561153,-1.21552,0.0141784,0.809785,-0.690243,0.0576908,0.417096,-0.166247,-0.0186772,0.634492,0.213395,-0.0312298,0.330382,0.647591,-0.0142305,0.423624,0.848587,-0.142139,0.11664,0.899708,-0.287155,0.0533985,0.798636,-0.37245,-0.104143,1.06699,-0.617813,0.317024,0.974975,-0.365267,0.49827,0.871605,-0.157506,0.626094,0.763872,-0.289265,0.649553,0.641982,-0.119356,0.774221,0.102167,-0.0373347,0.531141,-0.0563492,0.0997443,0.429431,-0.747919,0.18886,0.0329377,-0.763679,0.304462,-0.253782,-1.30542,0.402983,-0.573719,-1.291,0.498844,-1.02482,-1.55016,0.494781,-0.90165,-1.01075,0.557198,-1.22992,-0.538245,0.385223,-0.849615,0.0542139,0.400947,-0.91648,0.239853,0.392127,-0.558274,-0.0861787,0.189513,-0.194481,0.245401,0.25341,-0.364695,0.730898,0.299649,-0.403155,0.677875,0.141717,-0.191424,0.609717,-0.00847705,-0.167785,0.856156,0.121318,-0.517107,1.08621,0.0695057,-0.418507,1.00161,-0.163209,-0.241034,1.00822,-0.309453,-0.304477,1.18358,-0.168259,-0.713247,1.27276,-0.135024,-0.816934,1.32018,0.425718,-0.717727,1.4029,0.512888,0.0388361,1.58115,0.393454,0.591118,0.998388,0.0357536,-0.211638,0.356248,0.201353,-0.290683,0.805511,0.110188,-0.143665,0.964329,-0.0281822,-0.287039,0.968444,0.0271385,-0.448007,1.05591,-0.00110263,-0.363408,0.832118,0.0227314,-0.20396,1.21395,0.0843228,-0.697053,1.64227,-0.0990119,-1.03715,1.23638,-0.115593,-0.916583,1.13244,-0.00439819,-0.978039,0.706733,0.0346408,-1.15404,0.654382,0.234456,-1.23612,0.447774,0.66598,-1.75644,0.00363579,0.643533,-1.57696,-0.330667,0.546452,-1.29941,-0.610831,0.383134,-0.852745,-0.600874,0.470027,-1.09016,-1.03159,0.56181,-1.53647,-0.613121,0.343377,-1.10901,-0.187047,0.341067,-0.675928,-0.591443,0.244738,-0.342893,-0.439477,0.210715,0.0764343,-0.874886,0.127444,0.597941,-0.926799,-0.000667207,0.907803,-0.418524,0.0736639,0.395726,-0.037444,0.00497154,0.535221,0.517677,0.0297047,0.0308756,0.756343,0.114115,0.0960944,0.940971,0.0801891,-0.276118,0.881369,0.450557,-0.174122,0.836738,0.0816236,-0.808267,-0.48055,-0.729103,0.0421869,-0.89836,-3.17912,0.43456,-5.29854,-0.33966,2.43914,-2.00809,-0.369949,8.54874,-4.72867,-4.3605,8.98896,-8.55321,1.57179,0.783884,-0.491017,1.21647,0.841759,-0.287708,0.628273,0.516679,0.0752845,0.384151,0.417043,-0.0129836,-0.00234241,0.065467,0.0180519,-0.359013,-0.0734632,-0.27226,-0.629088,-0.597998,-0.443678,-1.09754,-0.79243,-1.08156,-1.40693,-1.4521,-0.0202378,-2.41482,-2.18634,-0.908773,-1.62561,-1.78302,-0.386663,-0.406048,-0.531986,-0.0772081,-0.216459,-0.506553,0.288748,0.575731,0.0161343,-0.0551204,0.52807,0.0798029,-0.0258008,1.2059,0.120805,-0.747553,0.734135,0.162361,-0.648859,0.929058,0.123538,-0.952978,0.563416,0.0409595,-0.56994,0.264932,-0.508884,-1.16334,0.187527,-0.62801,-1.14781,-0.285926,-0.997534,-0.906042,-0.266011,-0.613976,-0.291182,-0.282298,-0.715272,-0.434107,0.044141,-0.427675,-0.683287,-0.0911334,-0.0501479,-0.289516,0.00722304,-0.0986997,0.0474156,-0.0331284,-0.0828337,0.202912,-0.143406,-0.212093,0.190713,-0.381155,-0.207547,0.296511,-0.10387,0.00705257,0.858536,-0.543481,-0.30012,1.36897,-0.856295,-0.761234,0.932519,-0.979692,-0.730797,0.735151,-0.524144,-0.316503,1.23421,-0.0554707,0.196296,0.534262,0.21527,0.809806,0.76481,0.331379,0.823155,0.52917,0.0817039,1.45889,-0.155998,0.44619,1.43988,-0.212767,-0.0289017,0.318353,-0.283765,0.0891786,-0.0519151,-0.309749,-0.266579,-0.460835,-0.226142,-0.41745,-0.0709144,0.396392,-0.248113,0.0832498,0.537003,-0.55071,0.776058,1.14079,-0.907705,0.162942,1.58206,-0.78536,-0.414009,1.03961,-0.929208,-0.672169,0.651934,-0.801255,-0.73963,0.219432,-0.768635,-0.995449,0.127677,-0.708254,-0.895989,-0.131195,-1.00543,-1.42586,-0.52046,-0.943378,-1.31495,-0.216655,-0.424167,-0.865267,-0.408573,-0.102654,-0.276664,-0.104583,-0.137571,-0.225044,0.0211667,-0.744332,-0.616628,0.424438,-0.711247,-0.204694,0.911292,-0.172616,0.336656,0.747638,0.146603,0.447349,0.455242,0.776642,0.946051,0.283647,1.17584,1.23933,0.161665,0.961248,1.39057,0.389251,0.36091,0.954894,0.564167,0.139511,0.817671,0.337221,-0.116783,0.269351,0.290933,-0.149668,0.220784,-0.165451,-0.23236,-0.316371,-0.352016,0.290211,-0.0163414,-0.78428,0.310762,0.201378,-0.811887,2.53496,0.648897,-0.220297,3.94973,3.88075,-0.236329,-0.14103,3.69252,-2.76606,-2.33113,2.35048,-0.747442,5.67746,-2.50285,2.19246,0.259263,0.485679,-0.213876,0.750133,0.611543,-0.0795855,0.613783,0.55961,-0.0263513,0.781219,0.607642,-0.000758603,0.686012,0.689766,-0.242279,0.0840792,0.641815,-0.329609,-0.158703,0.121292,-0.36556,-1.3926,-0.416069,-0.997336,-2.17926,-1.56182,1.24697,-4.5898,-2.98876,-0.809333,-2.12909,-1.56001,-0.0935673,0.0694231,0.364162,-0.144947,0.481594,0.243181,0.0943011,1.04583,0.619836,-0.312184,0.62286,0.799627,-0.338571,0.440963,0.681878,-0.68496,-0.132014,0.690687,-0.563503,-0.973214,0.00447363,-0.425235,-1.24613,-0.515174,0.0174991,-1.99585,-0.449359,-0.435832,-1.45764,0.422235,-0.38208,-0.757718,0.540748,-0.162852,0.139335,0.543418,-0.0798082,0.133746,0.895767,-0.24311,0.191325,0.920606,-0.266536,0.530171,0.742519,-0.277118,0.514193,0.76351,-0.35949,0.640164,0.582848,-0.0810558,0.563054,0.331888,-0.0683655,0.149418,0.313286,-0.123181,0.36814,-0.0686564,0.281697,0.235694,-0.536007,0.83602,-0.242158,-0.792323,0.455317,-0.851982,-0.855691,0.358672,-0.328828,-0.745461,0.886774,0.0101444,-0.148643,0.224776,0.44548,0.0635042,0.333771,0.817737,0.447627,-0.254957,1.13545,0.330311,-0.119302,0.551534,0.101998,-0.250909,0.763768,0.653852,-0.262603,0.704611,0.961964,-0.377618,0.741514,0.905006,-0.255995,0.863072,0.56598,-0.237716,0.487002,-0.0969384,0.0581343,1.26489,-0.984895,0.298497,1.88079,-1.01961,0.456085,0.906278,-0.923394,0.224646,0.907878,0.189379,-0.241298,0.556941,0.332267,-0.281146,0.632314,0.501632,-0.149953,0.401485,0.817678,-0.26014,-0.315017,0.940143,-0.10295,-0.443979,0.0568058,-0.0429265,-0.84072,-0.253934,0.072021,-0.592672,-0.483977,0.153894,-1.0893,-1.22747,0.31721,-0.735041,-1.33218,0.398471,-0.275218,-1.18978,0.706112,-0.493719,-1.36893,0.734861,-0.150704,-0.442758,0.560086,-0.186451,-0.503249,0.603662,0.387071,0.078981,0.40925,0.973118,0.219039,0.732937,0.498242,0.156024,0.67047,0.740626,0.107548,0.225021,0.597049,0.682044,-0.172202,0.629018,0.695328,-0.372908,0.63918,0.76172,-0.347959,0.305716,0.763365,-0.531879,0.430918,0.673596,0.0720627,-0.432236,0.579411,-0.170783,-1.04489,-1.15076,0.079751,-0.187396,-1.26962,0.482002,0.829019,-2.63381,0.437646,-3.1789,0.756044,0.111713,1.59487,-0.327799,0.499137,1.05679,-0.562652,0.160275,0.472892,-0.46673,-0.0337568,0.00774467,-0.718645,-0.306828,-0.12992,-0.762708,-0.412732,-0.337905,-0.907271,-0.715572,-0.015842,-0.398867,-0.250588,1.88066,0.444863,-0.0875622,0.679472,1.72959,0.736649,0.31993,-0.3632,0.0374997,-2.43402,-2.10678,0.00564123,-1.05953,-1.0857,-0.358977,-0.333127,-1.31551,0.000962096,0.109231,-1.02922,-0.0752412,0.334562,-1.01961,0.0195088,1.08174,-0.827196,-0.0366511,0.865731,-0.591676,0.00641089,1.40559,0.0145103,0.146855,0.992161,0.271793,0.461257,0.76294,0.121596,0.200426,0.489877,-0.487316,-0.526761,-0.318086,-0.56911,-0.85108,-0.234789,-0.521065,-0.765838,-0.260753,-0.738324,-0.991954,-0.184303,-0.579151,-1.13311,-0.209977,-0.334756,-0.835041,0.00386785,-0.198315,-0.596486,-0.225392,0.0826941,-0.856714,-0.545416,0.637908,-1.00757,-0.373545,0.736437,-0.179239,-0.154193,1.10832,0.276851,-0.817137,1.89163,-0.282378,-1.04436,2.66242,0.106749,-0.679484,2.4417,1.23821,-0.474682,1.81807,1.36201,0.210275,1.01786,1.41874,0.352294,0.11843,1.12359,0.661193,-0.0162413,0.420685,1.1257,-0.338136,0.791026,0.79589,-0.035233,1.08764,0.439429,0.0677458,0.203987,0.528686,0.00320714,-0.0536514,-0.0459897,-0.293522,-0.413991,-0.0650998,-0.238176,-0.550673,0.0444222,-0.0624555,-0.599432,-0.30315,0.218853,-0.939983,-0.465841,0.363866,-1.09659,-0.118818,0.487852,-0.853043,-0.0969002,-0.220662,-0.479861,-0.291336,-0.133175,-0.273875,-0.533966,-0.508354,-0.618829,-0.351645,-0.582434,-0.815692,-1.3663,-0.795355,-0.895652,-1.20983,-0.519256,-0.128611,-0.458945,-0.141386,-0.166034,0.0679936,0.206182,0.197069,0.0427432,0.7881,0.884401,-0.937134,0.88545,0.843948,-0.681931,0.776529,0.798576,-0.0498439,0.954005,1.03253,0.360765,0.43589,0.541368,1.03447,0.572778,0.752793,1.14404,0.109941,0.790664,0.729202,-0.169026,0.25812,0.237927,-0.0446733,0.0589165,-0.110028,-0.346803,-0.592203,-0.0947199,-0.487164,-0.516152,-0.136605,-0.527148,-0.695807,0.01421,-0.144482,-0.291518,0.354077,-0.159602,-0.0720321,0.677307,0.508126,1.01171,0.552925,0.0958406,1.05731,-0.307997,-0.899726,0.351293,-0.17642,-0.735721,0.566215,-0.847114,0.0650334,0.641431,-2.94954,1.67311,0.267259,0.244535,0.0139147,0.441975,0.279059,-0.147585,0.107714,0.10218,0.144819,-0.298781,-0.0423154,0.083244,-0.364182,0.00438079,0.195658,-0.470662,-0.529363,0.397008,-0.016175,-0.233938,0.703765,0.790627,0.720015,1.1095,1.65428,-1.03233,2.14181,3.57359,-2.61349,1.01936,2.18315,-2.782,1.01532,1.62472,-1.50017,1.27673,0.0144273,0.116969,0.382234,-0.386676,0.0915077,0.362663,-0.349132,0.418793,-0.00554736,-0.506418,0.352432,0.0946178,0.0865811,0.282191,0.0668889,0.10265,-0.00911015,0.15066,0.592127,-0.259332,0.161068,0.831404,-0.377062,0.382147,0.911634,-0.342798,0.333599,0.487676,-0.414933,0.434817,0.314329,-0.173466,0.205612,-0.0310982,-0.201445,0.0601163,-0.297272,0.0927377,-0.0430054,-0.192574,0.166402,-0.1438,-0.274119,-0.102822,-0.335286,-0.531287,0.175675,-0.575642,-0.814981,0.503163,-0.426915,-0.754806,0.187481,-0.418489,-0.604103,0.0471238,-0.931657,-0.914942,0.66824,-0.842027,-1.27435,0.631338,-0.443809,-1.03685,0.0883994,-0.608984,-0.671621,0.059357,-1.05601,-0.755308,-0.100323,-0.857395,-0.774833,-0.348903,-0.748154,-0.761633,-0.430681,-0.604844,-0.529444,-1.04025,-0.751575,-0.399017,-0.227155,-0.630651,-0.383377,-0.00193759,-0.772007,0.24088,0.0634396,-1.03115,0.298061,0.491359,-0.335182,-0.062327,0.481904,-0.287048,-0.393524,0.403166,-0.250132,-0.652449,0.627775,-0.821829,-1.21649,1.02666,-0.440886,-1.45467,0.945025,-0.0516669,-1.0882,1.08364,-0.0607773,-0.611326,0.501536,0.198278,-0.0912887,-0.0800884,0.457631,-0.392345,-0.168242,0.510064,-0.331503,-0.714701,0.855091,-0.0152607,-0.69942,0.607462,0.341586,-0.471338,0.547415,0.481084,-0.268402,0.2377,0.521306,-0.445386,0.306441,0.944361,-0.572664,0.557083,0.713966,-0.108389,0.152133,0.391592,-0.273383,-0.155179,0.573953,-0.0988832,-0.0468786,0.421151,-0.0724587,-0.181115,0.570914,0.0990088,-0.166824,0.534518,0.185732,-0.399612,0.151835,-0.016953,-0.174286,-0.0544746,-0.0404277,-0.337237,-0.597271,0.114268,-0.101709,-0.529767,0.0911966,-0.098199,-0.137463,0.240096,-0.21836,0.327932,0.564418,-0.427279,0.994916,0.490207,-0.575532,0.744125,0.864985,-1.15595,0.965793,0.661879,-0.029582,-0.209424,0.675479,-0.0322209,-0.205924,-0.751381,2.95982,-0.626271,2.7022,-0.402651,-0.871246};
	// distances for weights = 0.5 and maxInvNorm = 0.091125, as obtained with octave
	double expected_distances[] = {0.1158832344803992, 0.04568007474176308, -0.0512689770315744, 0.1017831825463171, 0.04814151580548871, -0.04299884433626626, 0.06368016983226581, 0.03569691651930079, -0.03096631760255921, 0.03328119158398844, 0.0328570463140198, -0.02691141192113228, 0.02751651386273668, 0.02105290202514535, -0.01658512175309761, -0.04045243361241723, 0.0210759703606703, -0.01429776620462708, -0.03109058499009765, 0.01240008464307543, 0.0531664307802135, 0.03188861362276457, 0.04053017249069621, 0.04846996735028856, -0.1685856559203284, 0.07136330610831972, 0.343003285951902, -0.4286840321879767, -0.1556688460290043, 0.1056726460710788, -0.422845150789223, -0.1541489694016275, 0.1174665765958319, -0.1465080286332364, 0.03845536638963597, 0.02034620814537847, -0.02527798408893579, -0.01217541554871742, 0.04224253717815363, 0.042939941029597, 0.03362194821544683, -0.02404636369606838, 0.05672725139732883, 0.02003943254358206, -0.02931502026218994, 0.09838006313978619, 0.02137050056279126, -0.07947841211663675, 0.06340179156564472, 0.01454007257467482, -0.07203818409234554, 0.04643965538917873, -0.008541028219003571, -0.08184119652045296, 0.01086202854527713, -0.04415987006379228, -0.0350567576787736, -0.03952782301302035, -0.06936899997803858, -0.08674983578461162, -0.02284339305508342, -0.04485713704523779, -0.09577268512428022, -0.02437794083402843, -0.0612444944089497, -0.07449828516051957, 0.02392668901684698, -0.03923393979957102, -0.03504015467370689, 0.02299689339556044, -0.0354311818693263, -0.04684398458076201, 0.03614560316308692, -0.008875882673523579, -0.07068254189425942, 0.03912461693909595, 0.01325270180584788, -0.0405961698914623, 0.05167962757585513, 0.009914340497838807, -0.004151179554958822, 0.05358490487553708, 0.007112337354882084, -0.0002521342190951791, 0.02575839140266555, 0.0241696287067916, -0.009499365608852018, -0.005929243390517206, 0.02877390991978178, 0.03941997182396036, 0.02617204953301781, 0.0006111386648489271, 0.1005589888543988, -0.01126290181497701, 0.009053512957698006, 0.1070052285905306, -0.07239076968147523, 0.03846498009454564, 0.09797654724030072, -0.1060240201511395, 0.0200959237671332, 0.1543861226435934, -0.050262043958098, -0.02553532155495364, 0.2035844625504072, 0.02281809215301548, -0.009455192685108329, 0.13911518523913, 0.07993554150696204, -0.01539276263757927, 0.1418126268114839, 0.1145039639826491, 0.05349406219852814, 0.1027227103352278, 0.0900965396014783, 0.09324400735754421, 0.0600689342176029, 0.1025838629212861, 0.04471694097885378, 0.01747525514630899, 0.1082225564568904, 0.0135915370632018, 0.05874520450793277, 0.1132718697389236, 0.0004051443061843938, 0.05478762036605998, 0.08078966223495732, -0.004329538840453419, 0.01838167716276778, 0.09080097357715267, -0.03160486808392377, 0.0009851085964539786, 0.06719184983726637, -0.05224042140953355, -0.01827235885855095, 0.09388673137146669, -0.08999120346697287, -0.02468699183119541, 0.1480773361063784, -0.1088903348793095, 0.002538519284558238, 0.1089963180024866, -0.1112727977625119, -0.01301558957020632, 0.117412351199509, -0.07906710045928378, 0.001937503258665607, 0.06102050009643865, -0.05557085938444408, 0.008362351362308869, 0.02454207548126333, -0.04947176096445782, -0.01501805140275678, 0.02055510347367143, -0.03456482303166877, -0.03198388498279349, -0.05613255490163038, -0.06564861919697239, -0.0497756137265862, -0.05760358844055611, -0.1034351359878745, -0.0197089880914232, -0.03792278536267374, -0.0836861621740403, -0.02947915035316659, -0.002669894434968276, -0.06267921456961476, -0.00587657076700624, -0.03077323249039729, -0.08790735319328434, 0.0218467890190621, -0.05814291272972986, -0.1106923350175896, 0.04495628122478009, -0.01435212236556181, -0.09801782694005499, 0.07334049437635175, -0.005266118730275738, -0.08063132770447595, 0.06295878657589762, 0.03248087252029873, -0.02870532000807086, 0.03500992390021133, 0.06193573801698736, 1.327238028523506e-05, 0.02181887282475807, 0.09362111974046497, 0.04278176141189619, 0.009676444585778063, 0.09375921960911546, 0.04457268984262635, 0.01291557970159633, 0.04537613586635374, 0.02174067376439574, 0.01820502647411731, 0.03475722197133807, 0.004240463991645889, -0.0310401472112588, 0.0430815540922971, 0.001839525481235584, -0.02117798953916898, 0.05365452450161272, 0.008968101340524313, -0.01759016397939982, 0.0693365503067748, 0.003394457959595681, 0.03008665904706693, 0.1403368092013947, 0.009909980158692573, 0.05247578859826497, 0.1471246589561553, 0.02647710013544038, 0.07305507669073283, 0.1817665009772994, 0.0178487088538542, 0.08523861604791183, -0.01388146088823099, 0.1597169903598744, -0.3482347725632117, -0.3787265285313773, 0.2205124700744439, -0.5095722417326454, -0.8211222554251516, 0.4640272646042835, -0.3323205370562862, -0.3414491827125437, 0.182725684464305, -0.145171227018644};
	unsigned int mode_size = 76*3;
	unsigned int total_modes = 6;
	double* calculated_eigenT = (double*) malloc(total_modes*mode_size*sizeof(double));
	double* ET_E = (double*) malloc(total_modes*total_modes*sizeof(double));
	double* ET_d = (double*) malloc(total_modes*sizeof(double));

	cout<<"Transposing ..."<<flush<<endl;
	Math::Matrix::transpose(expected_eigenvectors,calculated_eigenT,mode_size,total_modes);

	double* EigT  = &(expected_eigenvectors[0]);
	double* Eig   = calculated_eigenT;

	double maxInvNorm = 0.091125;

	cout<<"Generating E' E ..."<<flush<<endl;
	Math::Matrix::matrixMult(EigT, Eig, ET_E, total_modes,mode_size,mode_size,total_modes);

//	cout<<"E' E --"<<endl;
//	for (unsigned int i =0; i < total_modes;++i){
//		for (unsigned int j =0; j < total_modes;++j){
//			cout<<ET_E[i*total_modes+j]<<" ";
//		}
//		cout<<endl;
//	}
//	cout<<endl;

	cout<<"Modifying dist ..."<<flush<<endl;
	Math::multiplyVectorByScalar(expected_distances,1/maxInvNorm,mode_size);

	cout<<"Generating E' d ..."<<flush<<endl;
	Math::Matrix::matrixMult(EigT, expected_distances, ET_d, total_modes,mode_size,mode_size,1);

//	cout<<"E' d --"<<endl;
//	for (unsigned int i =0; i < total_modes;++i){
//		cout<<ET_d[i]<<" ";
//	}
//	cout<<endl;

	asa_objective 	objective;
	objective.A = ET_E;
	objective.b = ET_d;

	unsigned int n = total_modes ;
	double* lo = (double *) malloc (n*sizeof (double)) ;
	double* hi = (double *) malloc (n*sizeof (double)) ;
	for (unsigned int i = 0; i < n; i++) lo [i] = -10 ;
	for (unsigned int i = 0; i < n; i++) hi [i] = 10 ;

	double* x  = (double *) malloc (n*sizeof (double)) ;
	for (unsigned int i = 0; i < n; i++) x [i] = 0.045563 ;

	asacg_parm cgParm;
	asa_parm asaParm;

	asa_cg_default(&cgParm);
	asa_default(&asaParm);

	asa_cg(	x, lo, hi, total_modes, NULL, &cgParm, &asaParm, 1e-8,
			SolverFunctions::function_value, SolverFunctions::function_grad,
			SolverFunctions::function_valgrad, NULL, &objective);

	for (unsigned int i =0; i < total_modes;++i){
		cout<<x[i]<<" ";
	}
	cout<<endl;
	cout<<"Freeing mem ..."<<flush<<endl;
	free(calculated_eigenT);
	free(ET_E);
	free(ET_d);
	free(hi);
	free(lo);
	bool result =  Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(w_result,x,total_modes,1.e-4);
	free(x);

	return result;
}

bool TestSolver::test_solve_projections(){
	double eigen[] = {  1,0,1,
						1,1,0,
						0,1,1};

	double distances[] = { 1.5,2,1};

	double expected_weights[] = {0.25,1.25,0.75};
	double expected_projections[] = {2.5, 3.5, 3};
	double expected_pseudoweights[] = {0.928477,1.29987,1.11417};
	double expected_prima_pseudoweights[] = {1.76777,2.47487,2.12132};

	Solver s(3,3);
	s.setDistances(distances,3);
	s.setEigenVectors(eigen,9,true);
	s.setLowerRange(-20);
	s.setHigherRange(20);

	s.solve(1e-20);
	double* weights = s.getWeights();

	cout<<"Weights: ";
	for (unsigned int i = 0; i < 3; ++i) {
		cout<<weights[i]<<" ";
	}
	cout<<endl;

	vector<double> p,pw,pwp;

	s.solveProjections(p,pw,pwp);

	cout<<"Projection: ";
	for (unsigned int i = 0; i < 3; ++i) {
		cout<<p[i]<<" ";
	}
	cout<<endl;

	cout<<"Pseudoweights: ";
	for (unsigned int i = 0; i < 3; ++i) {
		cout<<pw[i]<<" ";
	}
	cout<<endl;

	cout<<"Prima pseudoweights: ";
	for (unsigned int i = 0; i < 3; ++i) {
		cout<<pwp[i]<<" ";
	}
	cout<<endl;

	double weights_are_as_expected = Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(expected_weights,weights,3,1e-5)
	&& Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(expected_projections,&(p[0]),3,1e-5)
	&& Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(expected_pseudoweights,&(pw[0]),3,1e-5)
	&& Assertion::assertExpectedVectorEqualsCalculatedVectorWithinPrecision(expected_prima_pseudoweights,&(pwp[0]),3,1e-5);

	return weights_are_as_expected;
}

/* -----------------------------------------------------------
Function: void TestSolver::run()

Description:
Runs all the basic tests for a this test suite.

In:
void

Out:
void
-----------------------------------------------------------------*/
void TestSolver::run(){
	Test::run();
	//----------------------------------------------------

	TEST_FUNCTION(test_solver)
	TEST_FUNCTION(test_minimath_solving_scenario);
	TEST_FUNCTION(test_solve_projections);

	//-----------------------------------------------------
	finish();
}

/* -----------------------------------------------------------
Function: void TestSolver::finish()

Description:
Memory deallocation.

In:
void

Out:
void
-----------------------------------------------------------------*/
void TestSolver::finish(){

	//-----------------------------------------------------

	//-----------------------------------------------------
	Test::finish();
}


