/*
 * TestSolver.cpp
 *
 *  Created on: 30/06/2011
 *      Author: victor
 */

#include "TestSolver.h"
#include "../../../../Tools/Assertion.h"


/*-----------------------------------------------------------
Function: TestSolver::TestSolver()

Description:
Constructor. Just changes the name of the test suite.
In:
void

Out:
void
-----------------------------------------------------------------*/
TestSolver::TestSolver(){
	Test::create("");
}

/* -----------------------------------------------------------
Function: TestSolver::TestSolver(string name)

Description:
Initializes the test class giving it a name.

In:
void

Out:
void
-----------------------------------------------------------------*/

TestSolver::TestSolver(string name){
	Test::create(name);
}

/*-----------------------------------------------------------
Function: TestSolver:~TestSolver()

Description:
Destructor. Does nothing.
In:
void

Out:
void
-----------------------------------------------------------------*/
TestSolver::~TestSolver(){

}

/*-----------------------------------------------------------
Function:void TestSolver::init()

Description:
In this function global data has to be initialized (memory allocation, file reading... etc).

In:
void

Out:
void
-----------------------------------------------------------------*/

void TestSolver::init(){
	// Initialize vars we are going to use globally
}

bool TestSolver::test_solver(){

	double A[]={1, 3,-2,
				3, 5, 6,
				2, 4, 3};

	double b[] ={5,7,8};

	double high[]={50,50,50};

	double low[]={-50,-50,-50};

	double weights[]={0,0,0};

	Solver solver(3,3,1);
	solver.setHigherRange(high,3);
	solver.setLowerRange(low,3);
	solver.setEigenVectors(A,9);
	solver.setDistances(b,3);
	solver.solve();

	double* x = solver.getWeights();
	double xsolv[]={-15,8,2};

	return Assertion::assertEqVect(x,xsolv,3,1e-6);
}


/* -----------------------------------------------------------
Function: void TestSolver::run()

Description:
Runs all the basic tests for a this test suite.

In:
void

Out:
void
-----------------------------------------------------------------*/
void TestSolver::run(){
	Test::run();
	//----------------------------------------------------

	TEST_FUNCTION(test_solver)

	//-----------------------------------------------------
	finish();
}

/* -----------------------------------------------------------
Function: void TestSolver::finish()

Description:
Memory deallocation.

In:
void

Out:
void
-----------------------------------------------------------------*/
void TestSolver::finish(){

	//-----------------------------------------------------

	//-----------------------------------------------------
	Test::finish();
}


